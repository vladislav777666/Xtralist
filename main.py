import asyncio
import aiohttp
import logging
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import BufferedInputFile
import datetime
from supabase import create_client, Client

SUPABASE_URL = ""
SUPABASE_API_KEY = ""

supabase: Client = create_client(SUPABASE_URL, SUPABASE_API_KEY)

API_TOKEN = ''
GEMINI_API_KEY = ""
AI_CHANNEL_ID = ''
CHANNEL_ID = '' 

bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
router = Router()
dp.include_router(router)

class Form(StatesGroup):
    exctracur = State()
    upgr = State()

async def gemini_query(prompt: str) -> str:
    async with aiohttp.ClientSession() as session:
        async with session.post(
            "https://generativelanguage.googleapis.com/v1beta/models/gemma-3-12b-it:generateContent",
            params={"key": GEMINI_API_KEY},
            json={"contents": [{"parts": [{"text": prompt}]}]}
        ) as resp:
            if resp.status != 200:
                return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            data = await resp.json()
            if not data.get("candidates"):
                return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞."
            return data["candidates"][0]["content"]["parts"][0]["text"]

async def send_text_as_file(message, text, filename="response.txt"):
    file_bytes = text.encode("utf-8")
    input_file = BufferedInputFile(file_bytes, filename)
    await message.answer_document(input_file, caption="–í–∞—à –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ —Ñ–∞–π–ª–µ.")
    return input_file  

@router.message(Command("start"))
async def start_handler(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤ –ø–æ—Å—Ç—É–ø–∞—Ç—å –≤ —Ç–æ–ø–æ–≤—ã–µ –≤—É–∑—ã? üóΩ\n\n"
        "/extrac - –°–æ–∑–¥–∞—Å—Ç —Ç–µ–±–µ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –¥–ª—è —Ç–≤–æ–µ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞. üí°\n"
        "/asis - –û—Ç–≤–µ—Ç—å –Ω–∞ –ª—é–±—ã–µ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–º–æ–∂–µ—Ç —Å –ª—é–±–æ–π –∏–¥–µ–µ–π! ‚¨ÜÔ∏è\n"
        "\n‚Äî‚Äî‚Äî\n"
        "Inst: https://www.instagram.com/apply.with.ai?igsh=MXQ3enhoeWFnb2g2\n"
        "tg: https://t.me/applywithai"
    )

async def is_subscribed(user_id):
    try:
        member = await bot.get_chat_member(CHANNEL_ID, user_id)
        return member.status in ("member", "administrator", "creator")
    except Exception:
        return False

def require_subscription(handler):
    async def wrapper(message: Message, state: FSMContext):
        if not await is_subscribed(message.from_user.id):
            await message.answer(
                "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!",
                reply_markup=subscribe_keyboard
            )
            return
        await handler(message, state)
    return wrapper

@router.message(Command("extrac"))
@require_subscription
async def extrac_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–ù–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ–π:\n\n"
        "1. –§–∞–∫—É–ª—å—Ç–µ—Ç (major)\n"
        "2. –°—Ç—Ä–∞–Ω—É –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è\n"
        "3. (–ü–æ –∂–µ–ª–∞–Ω–∏—é) –ú–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –ª—é–±—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ –∏–ª–∏ –æ –∂–µ–ª–∞–µ–º—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è—Ö\n"
    )
    await state.set_state(Form.exctracur)

@router.message(Command("asis"))
@require_subscription
async def asis_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–Ø —Ç–≤–æ–π –ª—É—á—à–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è! üòä\n\n"
        "–¢—ã –º–æ–∂–µ—à—å: \n"
        "‚Ä¢ –ó–∞–¥–∞—Ç—å –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å\n"
        "‚Ä¢ –ü–æ–ø—Ä–æ—Å–∏—Ç—å –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –ª—é–±–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏/–ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è\n"
        "‚Ä¢ –ü–æ–ø—Ä–æ—Å–∏—Ç—å —à–∞–±–ª–æ–Ω—ã/–ø—Ä–∏–º–µ—Ä –¥–ª—è LOR, POS, CV\n"
        "‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –Ω–∞ –≤—Å–µ –æ—à–∏–±–∫–∏\n"
        "\n‚Äî‚Äî‚Äî\n\n"
        "–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø–∞–º—è—Ç–∏!\n"
        "–ï—Å–ª–∏ –±–æ—Ç –∑–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è, –≤—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç –≤ —Å–≤–æ–µ –ø—Ä–æ—à–ª–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ/–≤–æ–ø—Ä–æ—Å –∏ –û–¢–ü–†–ê–í–¨–¢–ï –ó–ê–ù–û–í–û, –í–ú–ï–°–¢–ï –° –ø—Ä–æ—à–ª—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º."
    )
    await state.set_state(Form.upgr)

@router.message(Form.exctracur)
async def extrac_process(message: Message, state: FSMContext):
    wait_msg = await message.answer("üí° –°–æ–∑–¥–∞—é —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π...")
    prompt = f"""–î–∞–Ω–Ω—ã–µ –æ –º–æ–µ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–µ, —Å—Ç—Ä–∞–Ω–µ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –∏ –¥–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {message.text}
–ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–∞–≤—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ 12‚Äì15 –≤–Ω–µ–∫–ª–∞—Å—Å–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π, –Ω–∞–∏–±–æ–ª–µ–µ —Ü–µ–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã –õ–∏–≥–∏ –ü–ª—é—â–∞. –î–ª—è –∫–∞–∂–¥–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–∞–π:

–ö–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (1 —Å—Ç—Ä–æ–∫–∞).
–ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ (2‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è; —Å–≤—è–∑–∏ —Å —Å–µ–ª–µ–∫—Ü–∏–µ–π: –ª–∏–¥–µ—Ä—Å—Ç–≤–æ, –≥–ª—É–±–∏–Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å–∞, –≤–ª–∏—è–Ω–∏–µ, —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å).
–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (–æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π / –≤—ã—Å–æ–∫–∏–π / —Å—Ä–µ–¥–Ω–∏–π / –Ω–∏–∑–∫–∏–π)

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: —Å–ø–∏—Å–æ–∫ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É, —Å –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏(–ü–æ—Å—Ç–∞–≤—å —Å–º–∞–π–ª–∏–∫–∏ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–æ–º); –†–∞–∑–¥–µ–ª—è–π –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–æ–π. –ù–µ –∑–∞–¥–∞–≤–∞–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–µ –∏ –∑–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.

–¢–æ–Ω: –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π, —á–µ—Å—Ç–Ω—ã–π, –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –î–∞–π –ø—Ä–∏–º–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –ª–µ–≥–∫–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ Common App/—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—Å–∫–∏–µ —ç—Å—Å–µ –∏ –∏–Ω—Ç–µ—Ä–≤—å—é.

–°—Ç—Ä–æ–≥–æ–µ –ø—Ä–∞–≤–∏–ª–æ: –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∏–∫–∞–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –Ω–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Å–ª—É–∂–µ–±–Ω—ã—Ö —Ñ—Ä–∞–∑ –≤—Ä–æ–¥–µ ‚Äú—Å–ø–∏—Å–æ–∫ –Ω–∏–∂–µ‚Äù –∏–ª–∏ ‚Äú–ø—É–Ω–∫—Ç—ã‚Äù; –≤—ã–¥–∞–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤—è–∑–Ω—ã–π —Ç–µ–∫—Å—Ç, –≥–æ—Ç–æ–≤—ã–π –∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—é –≤ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô –°–ü–ò–°–ö–ò (–ù–∏–∫–∞–∫–∏–µ).
"""
    result = await gemini_query(prompt)
    await bot.delete_message(chat_id=message.chat.id, message_id=wait_msg.message_id)
    input_file = await send_text_as_file(message, result, filename="extrac.txt")
    if AI_CHANNEL_ID:
        await bot.send_document(
            chat_id=AI_CHANNEL_ID,
            document=input_file,
            caption=f"üìù /extrac\n–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.username or message.from_user.id}\n{message.text}"
        )
    await state.clear()

@router.message(Form.upgr)
async def asis_process(message: Message, state: FSMContext):
    wait_msg = await message.answer("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...")
    prompt = f"""–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.text}
–¢—ã ‚Äî –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è–º –∏ —Ä–∞–∑–≤–∏—Ç–∏—é –≤–Ω–µ–∫–ª–∞—Å—Å–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π. –û—Ç–≤–µ—á–∞–π –ø–æ-—Ä—É—Å—Å–∫–∏. –¢–≤–æ—è —Ü–µ–ª—å ‚Äî –±—ã—Å—Ç—Ä–æ –∏ –Ω–∞–¥—ë–∂–Ω–æ –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å, –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏ –¥–æ—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏–¥–µ–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤/–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π, –≥–æ—Ç–æ–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã (CV, SOP/—ç—Å—Å–µ, –º–æ—Ç–∏–≤–∞—Ü–∏–∏), —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π —Å –¥–µ–¥–ª–∞–π–Ω–∞–º–∏ –∏ —á–µ–∫-–ª–∏—Å—Ç–∞–º–∏, –≥–æ—Ç–æ–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã/–æ—Ç–≤–µ—Ç—ã –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é –∏ –¥–∞–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å—Ç–∏–ø–µ–Ω–¥–∏—è–º/—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—é.

–ü—Ä–∞–≤–∏–ª–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è:
1. –í—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–π —Å –∫—Ä–∞—Ç–∫–æ–≥–æ —Ä–µ–∑—é–º–µ (1‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), –∑–∞—Ç–µ–º –¥–∞–≤–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ (—Å–ø–∏—Å–∫–∏, —à–∞–≥–∏, —à–∞–±–ª–æ–Ω—ã). –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç ‚Äî –≤—ã–¥–∞–≤–∞–π —Ç–æ–ª—å–∫–æ –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç (–æ–¥–Ω–æ-–¥–≤–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).
2. –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π —Ñ–∞–∫—Ç—ã. –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (–¥–µ–¥–ª–∞–π–Ω—ã, —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è, —Å—Ç–∏–ø–µ–Ω–¥–∏–∏, —Ü–µ–Ω—ã, –ø—Ä–∞–≤–∏–ª–∞ –≤–∏–∑—ã) ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ —Å–ø—Ä–æ—Å–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ–Ω–ª–∞–π–Ω-–ø—Ä–æ–≤–µ—Ä–∫—É. –ï—Å–ª–∏ –±–æ—Ç –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –≤–µ–±—É, –≤—ã–ø–æ–ª–Ω–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –ø—Ä–∏–≤–µ–¥–∏ —Å—Å—ã–ª–∫–∏/–¥–∞—Ç—ã, –µ—Å–ª–∏ –Ω–µ—Ç - –Ω–∞–ø–∏—à–∏, —á—Ç–æ –Ω–µ –º–æ–∂–µ—à—å —ç—Ç–æ–≥–æ —Å–¥–µ–ª–∞—Ç—å.
3. –í—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —à–∞–≥–∏ ¬´—á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ¬ª.
4. –£—Ç–æ—á–Ω—è–π –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞; –≤ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö —Å–Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π –æ–±—â–∏–π –ø–æ–ª–µ–∑–Ω—ã–π —Å–æ–≤–µ—Ç, –ø–æ—Ç–æ–º –ø—Ä–µ–¥–ª–æ–∂–∏ —Ñ–æ—Ä–º—É –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏–π.
5. –§–æ—Ä–º–∞—Ç—ã –æ—Ç–¥–∞—á–∏: ¬´–ö–æ—Ä–æ—Ç–∫–æ¬ª (1‚Äì3 –ø—É–Ω–∫—Ç–∞), ¬´–ü–ª–∞–Ω¬ª (6‚Äì12 —à–∞–≥–æ–≤), ¬´–®–∞–±–ª–æ–Ω—ã¬ª (–≥–æ—Ç–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—ã: CV, SOP, –º–æ—Ç–∏–≤–∞—Ü–∏—è ‚Äî –≤ –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö: –∫–æ—Ä–æ—Ç–∫–∏–π/—Å—Ä–µ–¥–Ω–∏–π/–ø–æ–ª–Ω—ã–π), ¬´–†–µ–¥–∞–∫—Ü–∏—è¬ª (–∏—Å–ø—Ä–∞–≤—å –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –æ–±—ä—è—Å–Ω–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è).
6. –ü–æ –∫–∞–∂–¥–æ–º—É –¥–æ–∫—É–º–µ–Ω—Ç—É –¥–∞–≤–∞–π 1) –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∞–≤–∫–∏ (inline –∏–ª–∏ –ø—É–Ω–∫—Ç–∞–º–∏), 2) –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ—á–µ–º—É –ø—Ä–∞–≤–∫–∞ —É–ª—É—á—à–∞–µ—Ç (1‚Äì2 —Ñ—Ä–∞–∑—ã), 3) –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ (2 –≤–∞—Ä–∏–∞–Ω—Ç–∞).
7. –¢–æ–Ω ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –ø—É—Å—Ç—ã–µ –∑–∞–≤–µ—Ä–µ–Ω–∏—è —Ç–∏–ø–∞ ¬´—è –ª—É—á—à–∏–π¬ª, –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –ø—Ä–∏–≤–æ–¥–∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏ –ø—Ä–∏–º–µ—Ä—ã.
8. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç ¬´–æ—Ü–µ–Ω–∏—Ç—å —à–∞–Ω—Å—ã¬ª, –¥–∞–≤–∞–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤ —Ç—Ä—ë—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö (low/medium/high) –∏ –æ–±—ä—è—Å–Ω—è–π, –∫–∞–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç –æ—Ü–µ–Ω–∫—É.
9. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç —Å–æ–∑–¥–∞—Ç—å, –Ω–∞–ø–∏—Å–∞—Ç—å, –ø—Ä–∏–¥—É–º–∞—Ç—å –µ–º—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (Extracurriculars) –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è, —Å–∫–∞–∂–∏ –µ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥—É—é —Ñ—É–Ω–∫—Ü–∏—é. (–¢—ã —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –∏ —Ç–≤–æ—è –≤—Ç–æ—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è - —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–∞–∫–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)

–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å –±–µ–∑ –ø—Ä–æ—Ñ–∏–ª—è ‚Äî –¥–∞–≤–∞–π –ø–æ–ª–µ–∑–Ω—ã–π –æ–±—â–∏–π –æ—Ç–≤–µ—Ç –∏ –≤ –∫–æ–Ω—Ü–µ —à–∞–±–ª–æ–Ω –ø—Ä–æ—Ñ–∏–ª—è —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –∑–∞–ø–æ–ª–Ω–∏—Ç—å –µ–≥–æ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏.

–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç ¬´—Ä–∞–∑–≤–∏—Ç—å –∏–¥–µ—é¬ª ‚Äî —Å–ª–µ–¥—É–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ:
1) –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –æ —Ç–æ–º, —Ö–æ—Ä–æ—à–∞—è –ª–∏ –∏–¥–µ—è –∏ –∫–∞–∫ –µ—ë –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å.
2) –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–¥–µ–∏
3) +-5 –ø—Ä–∞–∫—Ç–∏—á–Ω—ã—Ö –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –∏–¥–µ–π –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∏–¥–µ–∏.
4) 5 —Ç—Ä—É–¥–Ω–æ—Å—Ç–µ–π\–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\–æ—à–∏–±–æ–∫ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å –∏ –∫–∞–∫ –∏—Ö —Ä–µ—à–∏—Ç—å.
5) 5 –ø—É–Ω–∫—Ç–æ–≤ "—á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ"
6) –í—Å—è –∏–¥–µ–∞–ª—å–Ω–∞—è –∏–¥–µ—è. –ù–∞–∑–≤–∞–Ω–∏–µ - –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Ñ—É–Ω–∫—Ü–∏–∏.

–í—Å–µ–≥–¥–∞ –≤—ã–¥–∞–≤–∞–π –∫—Ä–∞—Ç–∫–∏–π executive summary –≤ –Ω–∞—á–∞–ª–µ.

–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç (CV/—ç—Å—Å–µ) ‚Äî –≤–Ω–∞—á–∞–ª–µ —Å–¥–µ–ª–∞–π –±—ã—Å—Ç—Ä—ã–π —Å–∫–æ—Ä–∏–Ω–≥ –ø–æ 5 –∫—Ä–∏—Ç–µ—Ä–∏—è–º: —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, —è–∑—ã–∫, –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π, —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å (–∫–∞–∂–¥—ã–π 1‚Äì5).

–í—Å—ë –≤—ã—Ö–æ–¥–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ ‚Äî –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –ø—Ä—è–º—ã—Ö —Ü–∏—Ç–∞—Ç –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–π –≤—É–∑–æ–≤ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º.

–ü–∏—à–∏ —Ç–µ–∫—Å—Ç –≤ –∞–±—Å–æ–ª—é—Ç–Ω–æ —á–∏—Å—Ç–æ–º –≤–∏–¥–µ, –±–µ–∑ –Ω—É–º–µ—Ä–∞—Ü–∏–∏, –±–µ–∑ –±—É–ª–ª–µ—Ç–æ–≤, –±–µ–∑ –∂–∏—Ä–Ω–æ–≥–æ –∏–ª–∏ –∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –±–µ–∑ —Å–∫—Ä—ã—Ç—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏–ª–∏ —Å–ø–µ—Ü–∑–Ω–∞–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∫–æ–ø–∏—Ä—É—é—Ç—Å—è –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –≤–≤–æ–¥–Ω—ã–µ —Ñ—Ä–∞–∑—ã, –ø–æ—è—Å–Ω–µ–Ω–∏—è –∫ —Å–ø–∏—Å–∫–∞–º –∏ –ª–∏—à–Ω–∏–µ —Å–ª–æ–≤–∞ ‚Äî —Ç–æ–ª—å–∫–æ —Å–∞–º–∞—è –≤–∞–∂–Ω–∞—è –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π —Å–º–∞–π–ª–∏–∫–∏.

–ö–∞–∂–¥—É—é –Ω–æ–≤—É—é –º—ã—Å–ª—å –∏–ª–∏ —á–∞—Å—Ç—å –º—ã—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏. –ù–µ –æ—Å—Ç–∞–≤–ª—è–π –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫ –º–µ–∂–¥—É –Ω–∏–º–∏. –§–æ—Ä–º–∞—Ç–∏—Ä—É–π —Ç–∞–∫, —á—Ç–æ–±—ã –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –±—ã–ª–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–π –∏–¥–µ–µ–π –∏ –ª–µ–≥–∫–æ —á–∏—Ç–∞–ª–∞—Å—å –≤ —Å–ø–ª–æ—à–Ω–æ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–∞–π–ª–µ.
"""
    result = await gemini_query(prompt)
    await bot.delete_message(chat_id=message.chat.id, message_id=wait_msg.message_id)
    input_file = await send_text_as_file(message, result, filename="asis.txt")
    if AI_CHANNEL_ID:
        await bot.send_document(
            chat_id=AI_CHANNEL_ID,
            document=input_file,
            caption=f"üìù /asis\n–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.username or message.from_user.id}\n{message.text}"
        )
    await state.clear()

@router.message()
async def save_chat_id(message: Message):
    user_id = message.chat.id
    username = message.from_user.username or ""
    try:
        data = supabase.table("users").select("id").eq("id", user_id).execute()
        if not data.data:
            # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –¥–æ–±–∞–≤–∏—Ç—å
            supabase.table("users").insert({"id": user_id, "username": username}).execute()
        else:
            # –£–∂–µ –µ—Å—Ç—å ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å username, –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è
            if data.data[0].get("username") != username:
                supabase.table("users").update({"username": username}).eq("id", user_id).execute()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ id: {e}")

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
subscribe_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª",
                url="https://t.me/applywithai"
            )
        ],
        [
            InlineKeyboardButton(
                text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                callback_data="check_sub"
            )
        ]
    ]
)

async def periodic_broadcast():
    while True:
        try:
            data = supabase.table("users").select("id").execute()
            for row in data.data:
                try:
                    await bot.send_message(
                        chat_id=row["id"],
                        text=(
                            "–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç üëã\n"
                            "–ö–∞–∫ –≤–∞–º –±–æ—Ç?\n"
                            "–ë—É–¥–µ–º —Ä–∞–¥—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º üòä\n"
                            "–≠—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —É –Ω–∞—Å –≤ –∫–∞–Ω–∞–ª–µ - https://t.me/applywithai"
                        ),
                        reply_markup=subscribe_keyboard
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç {row['id']}: {e}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è id –∏–∑ –±–∞–∑—ã: {e}")
        await asyncio.sleep(14 * 24 * 60 * 60)  # 2 –Ω–µ–¥–µ–ª–∏

async def one_time_broadcast():
    try:
        data = supabase.table("users").select("id").execute()
        for row in data.data:
            try:
                await bot.send_message(
                    chat_id=row["id"],
                    text=(
                        "–ò–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ —Å–ø–∞–º, —è –≤–ø–µ—Ä–≤—ã–µ –Ω–∞—É—á–∏–ª—Å—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–∞–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è üò≠"
                    )
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç {row['id']}: {e}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è id –∏–∑ –±–∞–∑—ã: {e}")

@router.callback_query(F.data == "check_sub")
async def check_subscription(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if await is_subscribed(user_id):
        await callback.answer("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª!", show_alert=True)
        await callback.message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")
    else:
        await callback.answer("‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª!", show_alert=True)

def require_subscription(handler):
    async def wrapper(message: Message, state: FSMContext):
        if not await is_subscribed(message.from_user.id):
            await message.answer(
                "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!",
                reply_markup=subscribe_keyboard
            )
            return
        await handler(message, state)
    return wrapper

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    async def main():
#        await one_time_broadcast()
        await asyncio.gather(
            dp.start_polling(bot),
            periodic_broadcast()
        )
    asyncio.run(main())
